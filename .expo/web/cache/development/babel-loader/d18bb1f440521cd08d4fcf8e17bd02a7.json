{"ast":null,"code":"","map":{"version":3,"sources":[],"names":[],"mappings":"","sourcesContent":["// import React, {createContext, useState} from 'react';\r\n\r\n// import { getProduct } from './data/Dummy-Data';\r\n\r\n// export const CartContext = createContext();\r\n\r\n// export function CartProvider(props) {\r\n//   const [items, setItems] = useState([]);\r\n  \r\n//   function addItemToCart(id) {\r\n//     const product = getProduct(id);\r\n//     setItems((prevItems) => {\r\n//       const item = prevItems.find((item) => (item.id == id));\r\n//       if(!item) {\r\n//           return [...prevItems, {\r\n//               id,\r\n//               qty: 1,\r\n//               product,\r\n//               totalPrice: product.price \r\n//           }];\r\n//       }\r\n//       else { \r\n//           return prevItems.map((item) => {\r\n//             if(item.id == id) {\r\n//               item.qty++;\r\n//               item.totalPrice += product.price;\r\n//             }\r\n//             return item;\r\n//           });\r\n//       }\r\n//     });\r\n\r\n//   }\r\n\r\n//   function getItemsCount() {\r\n//       return items.reduce((sum, item) => (sum + item.qty), 0);\r\n//   }\r\n  \r\n//   function getTotalPrice() {\r\n//       return items.reduce((sum, item) => (sum + item.totalPrice), 0);\r\n//   }  \r\n  \r\n//   return (\r\n//     <CartContext.Provider \r\n//       value={{items, setItems, getItemsCount, addItemToCart, getTotalPrice}}>\r\n//       {props.children}\r\n//     </CartContext.Provider>\r\n//   );\r\n// }\r\n\r\n"]},"metadata":{},"sourceType":"script"}