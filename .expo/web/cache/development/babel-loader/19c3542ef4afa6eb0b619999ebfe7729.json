{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { createContext, useState } from 'react';\nimport { getProduct } from \"./data/Dummy-Data\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport var CartContext = createContext();\nexport function CartProvider(props) {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      items = _useState2[0],\n      setItems = _useState2[1];\n\n  function addItemToCart(id) {\n    var product = getProduct(id);\n    setItems(function (prevItems) {\n      var item = prevItems.find(function (item) {\n        return item.id === id;\n      });\n\n      if (!item) {\n        return [].concat(_toConsumableArray(prevItems), [{\n          id: id,\n          qty: 1,\n          product: product,\n          totalPrice: product.price\n        }]);\n      } else {\n        return prevItems.map(function (item) {\n          if (item.id == id) {\n            item.qty++;\n            item.totalPrice += product.price;\n          }\n\n          return item;\n        });\n      }\n    });\n  }\n\n  function getItemsCount() {\n    return items.reduce(function (sum, item) {\n      return sum + item.qty;\n    }, 0);\n  }\n\n  function getTotalPrice() {\n    return items.reduce(function (sum, item) {\n      return sum + item.totalPrice;\n    }, 0);\n  }\n\n  return _jsx(CartContext.Provider, {\n    value: {\n      items: items,\n      setItems: setItems,\n      getItemsCount: getItemsCount,\n      addItemToCart: addItemToCart,\n      getTotalPrice: getTotalPrice\n    },\n    children: props.children\n  });\n}","map":{"version":3,"sources":["C:/pedal-it-store/CartContext.js"],"names":["React","createContext","useState","getProduct","CartContext","CartProvider","props","items","setItems","addItemToCart","id","product","prevItems","item","find","qty","totalPrice","price","map","getItemsCount","reduce","sum","getTotalPrice","children"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,aAAf,EAA8BC,QAA9B,QAA6C,OAA7C;AAEA,SAASC,UAAT;;AAEA,OAAO,IAAMC,WAAW,GAAGH,aAAa,EAAjC;AAEP,OAAO,SAASI,YAAT,CAAsBC,KAAtB,EAA6B;AAClC,kBAA0BJ,QAAQ,CAAC,EAAD,CAAlC;AAAA;AAAA,MAAOK,KAAP;AAAA,MAAcC,QAAd;;AAEA,WAASC,aAAT,CAAuBC,EAAvB,EAA2B;AACzB,QAAMC,OAAO,GAAGR,UAAU,CAACO,EAAD,CAA1B;AACAF,IAAAA,QAAQ,CAAC,UAACI,SAAD,EAAe;AACtB,UAAMC,IAAI,GAAGD,SAAS,CAACE,IAAV,CAAe,UAACD,IAAD;AAAA,eAAWA,IAAI,CAACH,EAAL,KAAYA,EAAvB;AAAA,OAAf,CAAb;;AACA,UAAG,CAACG,IAAJ,EAAU;AACN,4CAAWD,SAAX,IAAsB;AAClBF,UAAAA,EAAE,EAAFA,EADkB;AAElBK,UAAAA,GAAG,EAAE,CAFa;AAGlBJ,UAAAA,OAAO,EAAPA,OAHkB;AAIlBK,UAAAA,UAAU,EAAEL,OAAO,CAACM;AAJF,SAAtB;AAMH,OAPD,MAQK;AACD,eAAOL,SAAS,CAACM,GAAV,CAAc,UAACL,IAAD,EAAU;AAC7B,cAAGA,IAAI,CAACH,EAAL,IAAWA,EAAd,EAAkB;AAChBG,YAAAA,IAAI,CAACE,GAAL;AACAF,YAAAA,IAAI,CAACG,UAAL,IAAmBL,OAAO,CAACM,KAA3B;AACD;;AACD,iBAAOJ,IAAP;AACD,SANM,CAAP;AAOH;AACF,KAnBO,CAAR;AAqBD;;AAED,WAASM,aAAT,GAAyB;AACrB,WAAOZ,KAAK,CAACa,MAAN,CAAa,UAACC,GAAD,EAAMR,IAAN;AAAA,aAAgBQ,GAAG,GAAGR,IAAI,CAACE,GAA3B;AAAA,KAAb,EAA8C,CAA9C,CAAP;AACH;;AAED,WAASO,aAAT,GAAyB;AACrB,WAAOf,KAAK,CAACa,MAAN,CAAa,UAACC,GAAD,EAAMR,IAAN;AAAA,aAAgBQ,GAAG,GAAGR,IAAI,CAACG,UAA3B;AAAA,KAAb,EAAqD,CAArD,CAAP;AACH;;AAED,SACE,KAAC,WAAD,CAAa,QAAb;AACE,IAAA,KAAK,EAAE;AAACT,MAAAA,KAAK,EAALA,KAAD;AAAQC,MAAAA,QAAQ,EAARA,QAAR;AAAkBW,MAAAA,aAAa,EAAbA,aAAlB;AAAiCV,MAAAA,aAAa,EAAbA,aAAjC;AAAgDa,MAAAA,aAAa,EAAbA;AAAhD,KADT;AAAA,cAEGhB,KAAK,CAACiB;AAFT,IADF;AAMD","sourcesContent":["import React, {createContext, useState} from 'react';\r\n\r\nimport { getProduct } from './data/Dummy-Data';\r\n\r\nexport const CartContext = createContext();\r\n\r\nexport function CartProvider(props) {\r\n  const [items, setItems] = useState([]);\r\n  \r\n  function addItemToCart(id) {\r\n    const product = getProduct(id);\r\n    setItems((prevItems) => {\r\n      const item = prevItems.find((item) => (item.id === id));\r\n      if(!item) {\r\n          return [...prevItems, {\r\n              id,\r\n              qty: 1,\r\n              product,\r\n              totalPrice: product.price \r\n          }];\r\n      }\r\n      else { \r\n          return prevItems.map((item) => {\r\n            if(item.id == id) {\r\n              item.qty++;\r\n              item.totalPrice += product.price;\r\n            }\r\n            return item;\r\n          });\r\n      }\r\n    });\r\n\r\n  }\r\n\r\n  function getItemsCount() {\r\n      return items.reduce((sum, item) => (sum + item.qty), 0);\r\n  }\r\n  \r\n  function getTotalPrice() {\r\n      return items.reduce((sum, item) => (sum + item.totalPrice), 0);\r\n  }  \r\n  \r\n  return (\r\n    <CartContext.Provider \r\n      value={{items, setItems, getItemsCount, addItemToCart, getTotalPrice}}>\r\n      {props.children}\r\n    </CartContext.Provider>\r\n  );\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}